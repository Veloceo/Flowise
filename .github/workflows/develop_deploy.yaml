name: Deploy Flowise to AWS
 
on:
  push:
    branches:
      - develop
      - prod
      # - uat
 
env:
  AWS_REGION: ap-southeast-2
  ECR_REPOSITORY: veloceoai-flowise
  ECS_CLUSTER: veloceoai
 
jobs:
  deploy:
    runs-on: ubuntu-latest
 
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
 
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
 
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
 
    - name: Set environment variables
      id: set-env
      run: |
        if [ "${{ github.ref }}" == "refs/heads/prod" ]; then
          echo "ECS_SERVICE=orchestrait-prod-flowise-service" >> $GITHUB_ENV
          echo "ECS_TASK_DEFINITION=orchestrait-flowise-prod" >> $GITHUB_ENV
          echo "IMAGE_TAG=prod-latest" >> $GITHUB_ENV
        elif [ "${{ github.ref }}" == "refs/heads/uat" ]; then
          echo "ECS_SERVICE=hiremii-backend-uat-service" >> $GITHUB_ENV
          echo "IMAGE_TAG=uat-latest" >> $GITHUB_ENV
        elif [ "${{ github.ref }}" == "refs/heads/develop" ]; then
          echo "ECS_SERVICE=orchestrait-dev-flowise-service" >> $GITHUB_ENV
          echo "IMAGE_TAG=dev-latest" >> $GITHUB_ENV
        fi
 
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      run: |
        docker build --no-cache -t $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }} .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:${{ env.IMAGE_TAG }}
 
    - name: Download task definition
      run: |
        aws ecs describe-task-definition --task-definition orchestrait-flowise-prod --query taskDefinition > task-definition.json
 
    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ./task-definition.json
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
